ARG  BUILDER_IMAGE=golang:1.15-alpine 
############################
# STEP 1 build executable binary
############################
FROM ${BUILDER_IMAGE} as builder


# Install git + SSL ca certificates.
# Git is required for fetching the dependencies.
# Ca-certificates is required to call HTTPS endpoints.
# tzdata
RUN apk -U --no-cache add \
    build-base \
    git \
    gcc \
    bash \
    tzdata \
    git \
    ca-certificates \
    && update-ca-certificates


# Set TimeZone
ENV TZ=Asia/Bangkok

# Create appuser
ENV USER=appuser
ENV UID=10001

# See https://stackoverflow.com/a/55757473/12429735
RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    "${USER}"



# 
WORKDIR /go/src/main


# Download Modules
ADD go.mod go.mod
ADD go.sum go.sum
RUN go mod download

ADD . .


# Create directory for binary
RUN mkdir -p /app 

# Build the binary
RUN CGO_ENABLED=0 GOOS=linux go build \
    -ldflags='-w -s -extldflags "-static"' \
    -a -installsuffix cgo \
    # Set output #
    -o /app/main \
    # Set main startup #
    main.go
# RUN CGO_ENABLED=1  go build -o /app/covid-report-api ./cmd/api/api.go


############################
# STEP 2 build a small image
############################
FROM scratch



WORKDIR /app


# Import from builder.
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/
COPY --from=builder /etc/passwd /etc/passwd
COPY --from=builder /etc/group /etc/group

# Copy our static executable
COPY --from=builder /app /app

# Use an unprivileged user.
USER appuser:appuser


# Set TimeZone
ENV TZ=Asia/Bangkok

EXPOSE 80


ENTRYPOINT ["/app/main"]
